#ifndef __CONSTVALUE_H
#define __CONSTVALUE_H	

#include "stm32f10x.h"

extern u8 UsbError[8];
extern const u8 ToBoot[4];
extern const u8 ToApp[4];


//Boot和App相关
#define FLAG_TO_BOOT 0
#define FLAG_TO_APP 1
#define FLASH_ADDR_UPDATE_FLAG 0x0803F800  //存放标志位

#define FLASH_ADDR_APP 	0x08010000  //App程序存放地址
#define FLASH_ADDR_APP_OFFSET 2048
#define FLASH_ADDR_BOOT	((uint32_t)0x08000000) 
#define FLASH_VTOR_OFFSET  ((uint32_t)0x10000)


//ECal中USB相关
#define USB_PROTOCOL_SIZE 6  // 55 aa 01 长度 命令码 ... 和校验 占6个字节
#define USB_ONE_PACKAGE_SEND_SIZE 64
#define USB_ONE_PACKAGE_REAL_DATA_SIZE (USB_ONE_PACKAGE_SEND_SIZE - USB_PROTOCOL_SIZE - 2)   //55 aa 01 长度 命令码 当前包数占2字节... 和校验 占6个字节

#define POINTS_PACKAGES_FREQRANGE_LEN 16 ////点数、包数、最小频率、最大频率各占4个字节
#define PRODUCT_DATE_AND_SN_LEN 30  //前10个字节是时间，后10个字节是序列号,后10个是ECal的型号
#define RESPONSE_SEG_INFO 40  // 4 + (4+4+4)*3  第一个是分段数 占4个字节，（lStart lStop nPoints  各占4个字节）* 3 段
#define SEND_ECAL_DATA_ONE_PAGE_POINTS 7 //发送数据时一包发送7个点
#define SEND_ECAL_DATA_ONE_PAGE_POINTS_BYTES (SEND_ECAL_DATA_ONE_PAGE_POINTS * 2 * sizeof(float))


//SPI_FLASH 地址分配
#define SPI_FLASH_SECTOR_SIZE 4096  //1页256字节
#define SPI_FLASH_PAGE_SIZE 0x100  //1页256字节

#define ECAL_MAX_PACKAGES_IN_ONE_SECTOR 73
#define ECAL_MAX_BYTES_IN_ONE_SECTOR (SEND_ECAL_DATA_ONE_PAGE_POINTS_BYTES * ECAL_MAX_PACKAGES_IN_ONE_SECTOR)  //56*73 = 4088  一个扇区4096字节 最多73包数据

//前4K地址留出来存储其他信息
#define SPI_FLASH_BASE  0X0000  
#define SPI_FLASH_PRODUCTION_DATE_AND_SN SPI_FLASH_BASE
#define SPI_FLASH_POINTS_PACKAGES_FREQ_RANGE (SPI_FLASH_BASE + SPI_FLASH_PAGE_SIZE)
#define SPI_FLASH_RESPONSE_FREQ_SEG_INFO     (SPI_FLASH_BASE + 2 * SPI_FLASH_PAGE_SIZE)

#define SPI_FLASH_DATA_BASE (SPI_FLASH_BASE + 0X1000)  //前4K地址留出来存储其他配置
#define SPI_FLASH_DATA_STATE_OPEN_1    SPI_FLASH_DATA_BASE  //每个状态分配8个扇区32K的空间
#define SPI_FLASH_DATA_STATE_SHORT_1  (SPI_FLASH_DATA_BASE +  8 * SPI_FLASH_SECTOR_SIZE)
#define SPI_FLASH_DATA_STATE_50_1     (SPI_FLASH_DATA_BASE + 16 * SPI_FLASH_SECTOR_SIZE)
#define SPI_FLASH_DATA_STATE_75_1     (SPI_FLASH_DATA_BASE + 24 * SPI_FLASH_SECTOR_SIZE)
#define SPI_FLASH_DATA_STATE_OPEN_2   (SPI_FLASH_DATA_BASE + 32 * SPI_FLASH_SECTOR_SIZE)
#define SPI_FLASH_DATA_STATE_SHORT_2  (SPI_FLASH_DATA_BASE + 40 * SPI_FLASH_SECTOR_SIZE)
#define SPI_FLASH_DATA_STATE_50_2     (SPI_FLASH_DATA_BASE + 48 * SPI_FLASH_SECTOR_SIZE)
#define SPI_FLASH_DATA_STATE_75_2     (SPI_FLASH_DATA_BASE + 56 * SPI_FLASH_SECTOR_SIZE)

//用于DR10直通校准件的地址和NA7600的ECal不会共存
#define SPI_FLASH_DR10_PART1_THRU_1  SPI_FLASH_DATA_BASE  //每个状态分配4个扇区16K的空间
#define SPI_FLASH_DR10_PART1_THRU_2 (SPI_FLASH_DATA_BASE +  4 * SPI_FLASH_SECTOR_SIZE)
#define SPI_FLASH_DR10_PART1_THRU_3 (SPI_FLASH_DATA_BASE +  8 * SPI_FLASH_SECTOR_SIZE)
#define SPI_FLASH_DR10_PART2_THRU_1 (SPI_FLASH_DATA_BASE +  12 * SPI_FLASH_SECTOR_SIZE)
#define SPI_FLASH_DR10_PART2_THRU_2 (SPI_FLASH_DATA_BASE +  16 * SPI_FLASH_SECTOR_SIZE)
#define SPI_FLASH_DR10_PART2_THRU_3 (SPI_FLASH_DATA_BASE +  20 * SPI_FLASH_SECTOR_SIZE)
#define SPI_FLASH_DR10_PART3_THRU_1 (SPI_FLASH_DATA_BASE +  24 * SPI_FLASH_SECTOR_SIZE)
#define SPI_FLASH_DR10_PART3_THRU_2 (SPI_FLASH_DATA_BASE +  28 * SPI_FLASH_SECTOR_SIZE)
#define SPI_FLASH_DR10_PART3_THRU_3 (SPI_FLASH_DATA_BASE +  32 * SPI_FLASH_SECTOR_SIZE)
#define SPI_FLASH_DR10_PART4_THRU_1 (SPI_FLASH_DATA_BASE +  36 * SPI_FLASH_SECTOR_SIZE)
#define SPI_FLASH_DR10_PART4_THRU_2 (SPI_FLASH_DATA_BASE +  40 * SPI_FLASH_SECTOR_SIZE)
#define SPI_FLASH_DR10_PART4_THRU_3 (SPI_FLASH_DATA_BASE +  44 * SPI_FLASH_SECTOR_SIZE)

enum FIRMWARE_UPDATE
{
	FIRMWARE_UPDATE_BOOT = 0x00,
	FIRMWARE_UPDATE_BOOT_PREPAR_OK,
	FIRMWARE_UPDATE_TOTAL_PACKAGES,
	FIRMWARE_UPDATE_TOTAL_PACKAGES_OK,
	FIRMWARE_UPDATE_NEXT_PACKAGE,
	FIRMWARE_UPDATE_FINISHED
};

//send: PC->Ecal   read: Ecal->PC
enum ECAL_CODE
{
	ECAL_CODE_SWITCH_ADL5906_POWER = 0x10,
	ECAL_CODE_SWITCH_SATE,
	ECAL_CODE_SEND_POINTS_PACKAGES_FREQRANGE,  //点数、包数、最小频率、最大频率各占4个字节
	ECAL_CODE_READ_POINTS_PACKAGES_FREQRANGE,
	ECAL_CODE_SEND_DATA,
	ECAL_CODE_READ_DATA,
	ECAL_CODE_DATA_NEXT_PACKAGE,
    ECAL_CODE_DATA_LAST_PACKAGE,
    ECAL_CODE_DATA_SAVE_FINISHED,
	ECAL_CODE_SEND_PRODUCT_DATE_AND_SN,
	ECAL_CODE_READ_PRODUCT_DATE_AND_SN,
    ECAL_CODE_SEND_RESPONSE_FREQ_SEG_INFO,
    ECAL_CODE_READ_RESPONSE_FREQ_SEG_INFO,
	ECAL_CODE_READ_ECAL_CHARACTERIZATION_INFO,  //读取ECal特征信息，出厂日期，频段范围 扫描点数
	ECAL_CODE_SWITCH_DR10_THRU_SATE,  //DR10直通校准盒子
};

enum USB_CODE
{
    USB_CODE_ERROR = 0xF0,
};


#endif
